---
import List from './List.astro';
import InlineCode from './InlineCode.astro';
import '../styles/global.css'
import { getStyles, getStyleString, getClassAttributes } from '../api/utils.ts'

const { block, color } = Astro.props;
let { as = 'p' } = Astro.props;

let Tag = as
let objType: string;
const style = getStyleString(color)

Tag === 'figcaption' ? objType = 'caption' : objType = 'rich_text'
const blockObjs = block[block.type][objType]

const getText = (blockObj: any) => {
  let text = blockObj.plain_text
  const style = getStyles(blockObj)

  const classAttributes = getClassAttributes(blockObj)

  if (blockObj.href) {
    return `<a ${style && `style='${style}'`} href=${blockObj.href} ${getClassAttributes(blockObj)}>${text}</a>`
  }

  if (classAttributes || style) {
    text = `<span ${style && `style='${style}'`} ${classAttributes}>${blockObj.plain_text}</span>`;
  }

  if (block.type === 'to_do') {
    text = `
      <input type="checkbox" id="todo" name="todo" ${block[block.type].checked ? 'checked' : ''} />
      <label ${style && `style='${style}'`} ${classAttributes} for="todo">${blockObj.plain_text}</label>
    `
  }

  return text
}

// if rich_text is empty, render <br>
if (blockObjs.length === 0) {
  Tag = 'br'
}

const styleProp = {
  ...(style !== '' && {style})
};
---

<List {block} is_first={true} />
<Tag {...styleProp} class:list={'notion-' + Tag}>
  {
    blockObjs.map((blockObj: any) => {
      return (
        blockObj?.annotations.code
        ? <InlineCode text={blockObj.plain_text} />
        : <Fragment set:html={getText(blockObj)}></Fragment>
      )
    })
  }
  <slot />
</Tag>
<List {block} is_last={true} />

